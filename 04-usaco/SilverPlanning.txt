Plan for solving the silver problem:

Using our previous knowledge of recursive backtracking and the stuff we learned throughout the year, I have devised a solution to this problem. (LETS GOOOO)

1) need to read in the file first
- read it in with the scanner, parse the String lines into integers (similar to the bronze problem)
=> integer variables N, M, T
- N representing the number of rows
- M representing the number of columns
- T representing the time it will take for the cow to go from one location to the other
=> char[][] variable grid
- reads in the grid from the input, puts it accordingly
=> integer variables for the x1, y1, and x2, y2
- x1 y1 starting, x2 y2 ending

2) create a move function that would check if you could move up, down, left, or right
=> would take in a specific direction to move
=> be sure to look at the restrictions of the maze (cannot move to a *)
=> also cannot move off the grid

3) recursive backtracking solution (similar to countnodoubleletter words)
- the limit would be until the solve method reaches the T (time) value
=> once this happens STOP the specific case and do not add 1 to the total
- run the move function four times to branch out the possibilities
=> would also cut the possibilities that wouldn't work (means we can't move there)
- once the cow reaches the end point, count that as a solution and stop generating solutions for that specific instance
=> add one to the counter

4) make a tostring to see how the cow would move throughout the maze
- adding on to the recursive backtracking solution, place a 'C' that would be a cow in the grid
=> move around the C depending on the move function throughout the maze
=> the reason i would want a tostring is to see how the function is working depending on the time, and whether it stops/accomplishes its goal
